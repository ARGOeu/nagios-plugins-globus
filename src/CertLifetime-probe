#! /usr/bin/perl -w
# nagios: -epn 
#
# Probe for checking certificate lifetime
# Copyright (c) 2007 Emir Imamagic
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Changes and Modifications
# =========================
# 02-Apr-2007 - Created;
#
# 08-Jan-2009 - Migrated to Nagios::Plugin.
#
# 12-Feb-2009 - Migrated to IO::Socket::SSL, Net::SSLeay and Crypt::OpenSSL::X509
#
# 12-Mar-2009 - Migrated functions to GridMon::certutils
#
# 16-Dec-2009 - 1.4 Migrated to Apache 2.0 license

use strict;
use Nagios::Plugin;
use GridMon::certutils qw(&checkCertLifetimeSSL &checkCertLifetimeFile);
use GridMon::Nagios qw(nagios_debug);
use No::Worries::Syslog qw(syslog_open);

$SIG{__WARN__} = \&No::Worries::Warn::handler;
$SIG{__DIE__}  = \&No::Worries::Die::handler;

syslog_open(ident => "CertLifetime-probe", facility => "user");
nagios_debug("started");

# Standard variables used in Nagios::Plugin constructor
my $PROGNAME = 'CertLifetime-probe';
my $VERSION = '1.4';
my $DESCRIPTION = 'Probe for checking certificate lifetime.';
my $EXTRA_DESC = "";
my $LICENSE = 'This nagios plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
   http://www.apache.org/licenses/LICENSE-2.0
Copyright 2009 Emir Imamagic';
my $SHORTNAME = 'CERT LIFETIME';

my $CONVERT_PROTOCOL = {
    ssl2 => 'SSLv2',
    ssl3 => 'SSLv3',
    tls1 => 'TLSv1'
};

# Create Nagios::Plugin instance
my $plugin = Nagios::Plugin->new (usage => "Usage: %s <-H <hostname> -p <port>>|<-f <file>>",
                                  shortname => $SHORTNAME,
                                  version => $VERSION,
                                  blurb => $DESCRIPTION,
                                  extra => $EXTRA_DESC,
                                  license => $LICENSE,
                                  plugin  => $PROGNAME);
# Define additional arguments
$plugin->add_arg(
    spec => 'hostname|H=s',
    help => "H|hostname\n   Name or IP address of host to check.\n   (default: localhost)",
    required => 0,
    default => 'localhost'
);
$plugin->add_arg(
    spec => 'port|p=i',
    help => "p|port\n   Port of the service.\n   (default: 443)",
    required => 0,
    default => 443
);
$plugin->add_arg(
    spec => 'certfile|f=s',
    help => "f|certfile\n   Path to certificate file to check.",
    required => 0
);
$plugin->add_arg(
    spec => 'warning|w=i',
    help => "w|warning\n   Warning threshold for certificate lifetime (days).\n   (default: 7)",
    required => 0,
    default => 7
);
$plugin->add_arg(
    spec => 'critical|c=i',
    help => "c|critical\n   Critical threshold for certificate lifetime (days).\n   (default: 0)",
    required => 0,
    default => 0
);
$plugin->add_arg(
    spec => 'protocol=s',
    help => "--protocol=ssl2|ssl3|tls1\n   Which protocol to use.\n   (default: tls1)",
    required => 0,
    default => 'tls1'
);
$plugin->add_arg(
    spec => 'capath=s',
    help => "--capath=/location/...\n   Location where CA certificates are stored.\n   (default: /etc/grid-security/certificates)",
    required => 0,
    default => '/etc/grid-security/certificates'
);
$plugin->add_arg(
    spec => 'cert=s',
    help => "--cert=/location/...\n   Location of certificate used for authentication.\n",
    required => 0
);
$plugin->add_arg(
    spec => 'key=s',
    help => "--key=/location/...\n   Location of key used for authentication.\n",
    required => 0
);

$plugin->getopts;

# Signal handler - TERM
local $SIG{ALRM} = sub {
    local $SIG{TERM} = 'IGNORE';
    kill TERM => -$$;
    $plugin->nagios_die("Timeout occured.");
};

local $SIG{TERM} = sub {
    local $SIG{TERM} = 'IGNORE';
    kill TERM => -$$;
    $plugin->nagios_die("Plugin received TERM signal.");
};

# Input params validation

my $warning = $plugin->opts->warning * 1440;
my $critical = $plugin->opts->critical * 1440;
my ($state,$answer,$res);

alarm($plugin->opts->timeout);

# If certfile is defined perform file checking
if ($plugin->opts->certfile) {
    ($state,$answer,$res) = checkCertLifetimeFile ($plugin->opts->certfile, $warning, $critical);
}
# otherwise perform service checking
else {
    my $host = $plugin->opts->hostname;
    my $proto = $plugin->opts->protocol;

    if ($host !~ /^([-_.A-Za-z0-9]+\$?)$/) {
        nagios_die("Invalid host definition: $host.");
    }
    if ($proto !~ /^(ssl2|ssl3|tls1)$/) {
        nagios_die("Unknown protocol: $proto. Valid options: ssl2|ssl3|tls1.");
    }
    $proto = $CONVERT_PROTOCOL->{$proto};    
    ($state,$answer,$res) = checkCertLifetimeSSL($host, $plugin->opts->port, $warning, $critical, $proto, $plugin->opts->cert, $plugin->opts->key, $plugin->opts->capath);
}

alarm(0);

$plugin->nagios_exit($state, $answer);
